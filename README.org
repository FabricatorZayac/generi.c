Originally this was supposed to just be a little lib where I implement a bunch of data structures, but try to do it generically.
Now I implemented algebraic data types and I think this is starting to get out of control.
For how pattern matching should look like I took some inspo from https://github.com/Hirrolot/metalang99.
Then I realized that the way I work with `__VA_ARGS__` looks a little bit like Lisp.

* Architecture graph for generic structs and traits
#+begin_src dot :file architecture.png :exports results
digraph {
    rankdir="LR"
    compound=true
    subgraph cluster_0 {
        rank="same"
        label="Abstract Trait Header"
        color=blue
        "Proxy Template"
        "Proxy Assignment Template"
        "Trait Template"
    }
    subgraph cluster_3 {
        rank="same"
        label="Data type header"
        color=blue
        subgraph cluster_1 {
            label=DefineType
            color=darkgreen
            MethodProxy
            Constructor
        }
        "Concrete Trait"
        Impl
    }
    subgraph cluster_4 {
        rank="same"
        label="Data type Impl source"
        Methods
        "extern Impl"
    }
    subgraph A {
        edge [dir=none]
        "extern Impl" -> Impl
    }
    "extern Impl" [label=Impl]
    Methods -> "extern Impl"
    "Proxy Template" -> {"Proxy Assignment Template", MethodProxy}
    "Trait Template" -> "Concrete Trait"
    "Concrete Trait" -> Impl
    { "MethodProxy", "Proxy Assignment Template", Impl } -> Constructor
    Constructor -> Object [ltail=cluster_2]
}
#+end_src

#+RESULTS:
[[file:architecture.png]]
